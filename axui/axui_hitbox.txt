--@name axui_hitbox
--@author
--@client

local pressHolding = nil

function getScreenPosOnHoloRT( Screen, StartPos, AimNormal ) -- toakley
    
    local Intersect = trace.intersectRayWithPlane( StartPos, AimNormal, Screen:getPos(), Screen:getAngles():getUp() )
    if not Intersect then return nil, nil end
    
    local ScreenSize = Screen:getScale() * 12
    local ScreenResolution = 1024
    
    local SizeToPixelRatioX = ScreenResolution / ScreenSize[1]
    local SizeToPixelRatioY = ScreenResolution / ScreenSize[2]
    
    local ScreenCorner = localToWorld( Vector( -ScreenSize[1] / 2, -ScreenSize[2] / 2, 0 ), Angle(), Screen:getPos(), Screen:getAngles() ) 
    local LocalIntersect = worldToLocal( Intersect, Angle(), ScreenCorner, Screen:getAngles() ) 
    
    local PixelY = LocalIntersect[1] * SizeToPixelRatioX
    local PixelX = LocalIntersect[2] * SizeToPixelRatioY
    
    if ( (PixelX > 1024) or (PixelX < 0) ) or ( (PixelY > 1024) or (PixelY < 0) ) then
       PixelX,PixelY = nil, nil 
    else
        return math.floor(PixelX), math.floor(PixelY)
    end
    
end

axui.cursorSF = Vector(0, 0, 0)

hook.add("render", "axui.Hitbox", function()
    local sx, sy = render.cursorPos()
    axui.cursorSF.x = sx
    axui.cursorSF.y = sy
end)

local function checkPanelHitbox(panel)
    local cursorPos = Vector()
    
    if panel.childs then
        --for i, pan in ipairs(panel.childs) do
            --checkPanelHitbox(pan)
        --end
        for i = #panel.childs, 1, -1 do
            checkPanelHitbox(panel.childs[i])
        end
    end

    if pressHolding and pressHolding ~= panel then
        return
    end

    if type(panel.context) == "Hologram" then
        cursorPos.x, cursorPos.y = getScreenPosOnHoloRT(panel.context, eyePos(), eyeVector())
    else
        cursorPos.x = axui.cursorSF.x
        cursorPos.y = axui.cursorSF.y

        if (cursorPos.x and cursorPos.y) and panel.context == "screenRT" then
            cursorPos.x = cursorPos.x * 2
            cursorPos.y = cursorPos.y * 2

            render.selectRenderTarget("ui")
            render.drawRect(cursorPos.x - 5, cursorPos.y - 5, 10, 10)
        elseif panel.context == "hud" then
            cursorPos.x, cursorPos.y = input.getCursorPos()
        end
    end

    panel.cursorPos = cursorPos

    if cursorPos.x and cursorPos.y and cursorPos:withinAABox(panel.pos, panel.pos + Vector(panel.size.w, panel.size.h)) then
        if not pressHolding then
            panel.isHovered = true
            panel:onHovered()
        end

        local isMousePressed = player():keyDown(IN_KEY.ATTACK) or input.isMouseDown(MOUSE.LEFT)
        if isMousePressed then
            if not panel.isPressed then
                panel:onLeftClick()
                panel.isPressed = true
                pressHolding = panel
                panel.lastKey = (panel.context == "hud" and MOUSE.LEFT) or IN_KEY.ATTACK
            end
        end

        local isRightClick = player():keyDown(IN_KEY.ATTACK2) or input.isMouseDown(MOUSE.RIGHT)
        if isRightClick then
            if not panel.isPressed then
                panel:onRightClick()
                panel.isPressed = true
                pressHolding = panel
                panel.lastKey = (panel.context == "hud" and MOUSE.RIGHT) or IN_KEY.ATTACK2
            end
        end

        local isUseKey = player():keyDown(IN_KEY.USE)
        if isUseKey then
            if not panel.isPressed then
                panel:onLeftClick()
                panel.isPressed = true
                pressHolding = panel
                panel.lastKey = IN_KEY.USE
            end
        end
    else
        panel.isHovered = false
    end
end

hook.add("renderoffscreen", "axui.Hitbox", function()
    for i, panel in ipairs(axui.mainPanels) do
        checkPanelHitbox(panel)
    end

    if pressHolding then
        local panel = pressHolding
        if (panel.context == "hud" and not input.isMouseDown(panel.lastKey)) or 
           (panel.context ~= "hud" and not player():keyDown(panel.lastKey)) then
            panel.isPressed = false
            pressHolding = nil
        end
    end
    
    render.selectRenderTarget("ui")
    render.drawText(0, 0, tostring(pressHolding) or nil)
end)

--[[
hook.add("renderoffscreen", "axui.Hitbox", function()
    for i, panel in pairs(axui.panels) do
        if pressHolding and pressHolding ~= panel then continue end
        local cursorPos = Vector()

        if type(panel.context) == "Hologram" then
            cursorPos.x, cursorPos.y = getScreenPosOnHoloRT( panel.context, eyePos(), eyeVector() )
        else
            cursorPos.x = axui.cursorSF.x
            cursorPos.y = axui.cursorSF.y
            
            if (cursorPos.x and cursorPos.y) and panel.context == "screenRT" then
                cursorPos.x = cursorPos.x * 2
                cursorPos.y = cursorPos.y * 2

                render.selectRenderTarget("ui")
                render.drawRect(cursorPos.x - 5, cursorPos.y - 5, 10, 10)
            elseif panel.context == "hud" then
                cursorPos.x, cursorPos.y = input.getCursorPos()
            end
        end
        
        panel.cursorPos = cursorPos

        if (cursorPos.x and cursorPos.y) and cursorPos:withinAABox(panel.pos, panel.pos + Vector(panel.size.w, panel.size.h)) then
            panel.isHovered = true
            panel:onHovered()

            if player():keyDown(IN_KEY.ATTACK) or input.isMouseDown(MOUSE.LEFT) then
                if not panel.isPressed then
                    panel:onLeftClick()
                end
                panel.lastKey = (panel.context == "hud" and MOUSE.LEFT) or IN_KEY.ATTACK
                panel.isPressed = true
            elseif player():keyDown(IN_KEY.ATTACK2) or input.isMouseDown(MOUSE.RIGHT) then
                if not panel.isPressed then
                    panel:onRightClick()
                end
                panel.lastKey = (panel.context == "hud" and MOUSE.RIGHT) or IN_KEY.ATTACK2
                panel.isPressed = true
            elseif player():keyDown(IN_KEY.USE) then
                if not panel.isPressed then
                    panel:onLeftClick()
                end
                panel.lastKey = IN_KEY.USE
                panel.isPressed = true
            else
                panel.isPressed = false
            end
        else
            panel.isHovered = false

            if panel.isPressed then
                if (panel.context == "hud" and not input.isMouseDown(panel.lastKey)) or (panel.context ~= "hud" and not player():keyDown(panel.lastKey)) then
                    panel.isPressed = false
                    pressHolding = nil
                else
                    pressHolding = panel
                    break
                end
            end
        end
        
        render.selectRenderTarget("ui")
        render.drawText(0, 0, tostring(pressHolding) or "nil")
    end
end)
]]
